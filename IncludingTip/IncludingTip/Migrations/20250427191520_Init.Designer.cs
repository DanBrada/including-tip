// <auto-generated />
using System;
using IncludingTip.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IncludingTip.Migrations
{
    [DbContext(typeof(TipApplicationContext))]
    [Migration("20250427191520_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IncludingTip.Model.Country", b =>
                {
                    b.Property<string>("IsoCountryCode")
                        .HasColumnType("text")
                        .HasColumnName("iso_country_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TipPolicy")
                        .HasColumnType("text")
                        .HasColumnName("tip_policy");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("IsoCountryCode")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("IncludingTip.Model.CountryEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryIsoCountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_iso_country_code");

                    b.HasKey("Id")
                        .HasName("pk_country_edits");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_country_edits_author_id");

                    b.HasIndex("CountryIsoCountryCode")
                        .HasDatabaseName("ix_country_edits_country_iso_country_code");

                    b.ToTable("country_edits", (string)null);
                });

            modelBuilder.Entity("IncludingTip.Model.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<double>("Latitutde")
                        .HasColumnType("double precision")
                        .HasColumnName("latitutde");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_places");

                    b.HasIndex("CountryCode")
                        .HasDatabaseName("ix_places_country_code");

                    b.ToTable("places", (string)null);
                });

            modelBuilder.Entity("IncludingTip.Model.Tip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Experience")
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<int>("Percent")
                        .HasColumnType("integer")
                        .HasColumnName("percent");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasColumnName("place_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tips");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_tips_author_id");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_tips_place_id");

                    b.ToTable("tips", (string)null);
                });

            modelBuilder.Entity("IncludingTip.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("IncludingTip.Model.CountryEdit", b =>
                {
                    b.HasOne("IncludingTip.Model.User", "Author")
                        .WithMany("CountriesEdited")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_country_edits_users_author_id");

                    b.HasOne("IncludingTip.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryIsoCountryCode")
                        .HasConstraintName("fk_country_edits_countries_country_iso_country_code");

                    b.Navigation("Author");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("IncludingTip.Model.Place", b =>
                {
                    b.HasOne("IncludingTip.Model.Country", "Country")
                        .WithMany("Places")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_places_countries_country_code");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("IncludingTip.Model.Tip", b =>
                {
                    b.HasOne("IncludingTip.Model.User", "Author")
                        .WithMany("Tips")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tips_users_author_id");

                    b.HasOne("IncludingTip.Model.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tips_places_place_id");

                    b.Navigation("Author");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("IncludingTip.Model.Country", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("IncludingTip.Model.User", b =>
                {
                    b.Navigation("CountriesEdited");

                    b.Navigation("Tips");
                });
#pragma warning restore 612, 618
        }
    }
}
